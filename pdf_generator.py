from fpdf import FPDF

def format_currency(value):
    return f"${float(value):,.2f}"

class TaxPDF(FPDF):
    def header(self):
        self.set_font("Helvetica", 'B', 16)
        self.cell(0, 10, "U.S. Individual Income Tax Return Summary", ln=True, align='C')
        self.set_font("Helvetica", '', 10)
        self.cell(0, 10, "Tax Year 2023 - AI Tax Agent Prototype", ln=True, align='C')
        self.ln(5)

    def footer(self):
        self.set_y(-20)
        self.set_font("Helvetica", 'I', 9)
        self.set_text_color(100)
        self.multi_cell(0, 8,
            "Disclaimer: This summary is generated by an AI Tax Agent Prototype. "
            "It is not a substitute for official IRS forms or professional advice."
        )

def generate_better_tax_pdf(info, income, deductions, result, filename):
    pdf = TaxPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Helvetica", '', 11)

    # --- Section: Personal Information
    pdf.set_font("Helvetica", 'B', 12)
    pdf.cell(0, 10, "Section 1: Personal Information", ln=True)
    pdf.set_font("Helvetica", '', 11)
    pdf.cell(0, 8, f"Name: {info.get('full_name')}", ln=True)
    pdf.cell(0, 8, f"SSN: {info.get('ssn', '***-**-****')}", ln=True)
    pdf.cell(0, 8, f"Filing Status: {info.get('filing_status').title()}", ln=True)
    pdf.cell(0, 8, f"Address: {info.get('address')}, {info.get('city')}, {info.get('state')} - {info.get('zip_code')}", ln=True)
    pdf.ln(6)

    # --- Section: Income
    pdf.set_font("Helvetica", 'B', 12)
    pdf.cell(0, 10, "Section 2: Income Summary", ln=True)
    pdf.set_font("Helvetica", '', 11)
    pdf.cell(0, 8, f"Wages: {format_currency(income.get('wages', 0))}", ln=True)
    pdf.cell(0, 8, f"Interest: {format_currency(income.get('interest', 0))}", ln=True)
    pdf.cell(0, 8, f"Dividends: {format_currency(income.get('dividends', 0))}", ln=True)
    pdf.cell(0, 8, f"Business Income: {format_currency(income.get('business_income', 0))}", ln=True)
    pdf.cell(0, 8, f"Other Income: {format_currency(income.get('other_income', 0))}", ln=True)
    pdf.set_font("Helvetica", 'B', 11)
    pdf.cell(0, 8, f"Total Income: {format_currency(result.get('total_income'))}", ln=True)
    pdf.ln(6)

    # --- Section: Deductions
    pdf.set_font("Helvetica", 'B', 12)
    pdf.cell(0, 10, "Section 3: Deductions & Credits", ln=True)
    pdf.set_font("Helvetica", '', 11)
    pdf.cell(0, 8, f"Deduction Type: {deductions.get('deduction_type', '').title()}", ln=True)
    if deductions.get('deduction_type') == 'itemized':
        itemized = deductions.get('itemized', {})
        pdf.cell(0, 8, f"  - Mortgage Interest: {format_currency(itemized.get('mortgage', 0))}", ln=True)
        pdf.cell(0, 8, f"  - State Taxes Paid: {format_currency(itemized.get('state_taxes', 0))}", ln=True)
        pdf.cell(0, 8, f"  - Charitable Contributions: {format_currency(itemized.get('charity', 0))}", ln=True)
        pdf.cell(0, 8, f"  - Medical Expenses: {format_currency(itemized.get('medical', 0))}", ln=True)
    pdf.cell(0, 8, f"Dependents: {deductions.get('dependents', 0)}", ln=True)
    pdf.set_font("Helvetica", 'B', 11)
    pdf.cell(0, 8, f"Total Deductions: {format_currency(result.get('total_deductions'))}", ln=True)
    pdf.ln(6)

    # --- Section: Tax Result
    pdf.set_font("Helvetica", 'B', 12)
    pdf.cell(0, 10, "Section 4: Tax Calculation Result", ln=True)
    pdf.set_font("Helvetica", '', 11)
    pdf.cell(0, 8, f"Taxable Income: {format_currency(result.get('taxable_income'))}", ln=True)

    if result.get('final_tax_owed') > 0:
        pdf.set_text_color(200, 0, 0)
        pdf.cell(0, 8, f"Tax Owed: {format_currency(result.get('final_tax_owed'))}", ln=True)
    elif result.get('refund_amount') > 0:
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 8, f"Refund Due: {format_currency(result.get('refund_amount'))}", ln=True)
    else:
        pdf.set_text_color(100)
        pdf.cell(0, 8, "No taxes owed or refund due.", ln=True)

    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 8, f"Effective Tax Rate: {result.get('effective_tax_rate')}%", ln=True)
    pdf.cell(0, 8, f"Marginal Tax Rate: {result.get('marginal_tax_rate')}%", ln=True)

    # Save
    pdf.output(filename)
