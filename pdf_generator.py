from fpdf import FPDF
from io import BytesIO

def format_currency(value):
    try:
        return f"${float(value):,.2f}"
    except:
        return "$0.00"

class TaxPDF(FPDF):
    def header(self):
        self.set_font("Courier", 'B', 16)
        self.cell(0, 10, "U.S. Individual Income Tax Return Summary", ln=True, align='C')
        self.set_font("Courier", '', 10)
        self.cell(0, 10, "Tax Year 2025 - AI Tax Agent Prototype", ln=True, align='C')
        self.image("static/images/logo.jpg", 10, 8, 20)  # Reduced logo size
        self.ln(5)
        self.set_draw_color(180, 180, 180)
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(5)

    def footer(self):
        self.set_y(-20)
        self.set_font("Courier", 'I', 9)
        self.set_text_color(100)
        self.multi_cell(0, 8,
            "Disclaimer: This summary is generated by an AI Tax Agent Prototype. "
            "It is not a substitute for official IRS forms or professional advice."
        )

def generate_better_tax_pdf(info, income, deductions, result):
    pdf = TaxPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Courier", '', 11)

    def add_table(title, data_dict):
        pdf.set_fill_color(240, 240, 240)
        pdf.set_text_color(0)
        pdf.set_font("Courier", 'B', 12)
        pdf.cell(0, 10, title, ln=True, fill=True)
        pdf.set_font("Courier", '', 11)

        col_width = 90
        row_height = 8

        for label, val in data_dict.items():
            pdf.cell(col_width, row_height, f"{label}:", border=1)
            pdf.cell(0, row_height, f"{val}", border=1, ln=True)
            y = pdf.get_y()
            pdf.set_draw_color(200, 200, 200)
            pdf.dashed_line(10, y + 2, 200, y + 2, 1, 1)

        pdf.ln(4)

    add_table("Section 1: Personal Information", {
        "Name": info.get('full_name', ''),
        "SSN": info.get('ssn', '***-**-****'),
        "Filing Status": info.get('filing_status', '').title(),
        "Address": f"{info.get('address', '')}, {info.get('city', '')}, {info.get('state', '')} - {info.get('zip_code', '')}"
    })

    add_table("Section 2: Income Summary", {
        "Wages": format_currency(income.get('wages', 0)),
        "Interest": format_currency(income.get('interest', 0)),
        "Dividends": format_currency(income.get('dividends', 0)),
        "Business Income": format_currency(income.get('business_income', 0)),
        "Other Income": format_currency(income.get('other_income', 0)),
        "Total Income": format_currency(result.get('total_income', 0))
    })

    itemized = deductions.get('itemized', {}) if deductions.get('deduction_type') == 'itemized' else {}
    add_table("Section 3: Deductions & Credits", {
        "Deduction Type": deductions.get('deduction_type', '').title(),
        "Dependents": str(deductions.get('dependents', 0)),
        "Mortgage Interest": format_currency(itemized.get('mortgage', 0)),
        "State Taxes Paid": format_currency(itemized.get('state_taxes', 0)),
        "Charitable Contributions": format_currency(itemized.get('charity', 0)),
        "Medical Expenses": format_currency(itemized.get('medical', 0)),
        "Total Deductions": format_currency(result.get('total_deductions', 0))
    })

    tax_status = "Refund Due" if result.get('refund_amount', 0) > 0 else "Tax Owed"
    tax_amount = format_currency(result.get('refund_amount') if result.get('refund_amount', 0) > 0 else result.get('final_tax_owed', 0))

    add_table("Section 4: Tax Calculation Result", {
        "Taxable Income": format_currency(result.get('taxable_income', 0)),
        tax_status: tax_amount,
        "Federal Taxes Paid": format_currency(income.get('taxes_paid', 0)),
        "Effective Tax Rate": f"{result.get('effective_tax_rate', 0)}%",
        "Marginal Tax Rate": f"{result.get('marginal_tax_rate', 0)}%"
    })

    pdf.ln(12)
    pdf.set_font("Courier", 'B', 12)
    pdf.cell(0, 10, "E-Signature:", ln=True)
    pdf.set_draw_color(0)
    pdf.line(30, pdf.get_y() + 6, 150, pdf.get_y() + 6)
    pdf.ln(10)
    pdf.set_font("Courier", '', 11)
    pdf.cell(0, 8, f"Signed electronically by {info.get('full_name', '')}", ln=True)
    pdf.cell(0, 8, f"Date: {info.get('signature_date', '__________')}", ln=True)

    output = BytesIO()
    pdf_output_name = f"{info.get('full_name', 'user').replace(' ', '_')}_tax_2025.pdf"
    pdf.output(output)
    return output.getvalue(), pdf_output_name
